

/*=======================START-MEDIA=====================*/
@mixin r($width) {
  @media only screen and (max-width: $width+ "px") {
    @content; } }

@mixin rmin($width) {
  @media only screen and (min-width: $width+ "px") {
    @content; } }

/*=======================END-MEDIA=====================*/

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}


// fonts
@mixin font($fontName, $folderName, $fileName, $weight, $style) {
  @font-face {
    font-family: #{$fontName};
    font-display: swap;
    src: url("../fonts/#{$folderName}/#{$fileName}.woff") format("woff"), url("../fonts/#{$folderName}/#{$fileName}.woff2") format("woff2");
    font-weight: #{$weight};
    font-style: #{$style};
  }
}

// hover
@mixin hover($transition: 0.3s, $properties-list: all) {
  @media (any-hover: hover) {
    transition-duration: $transition;
    transition-property: $properties-list;
    &:hover {
      @content;
    }
  }
}

// gap
@mixin gap($property, $value) {
  @if $property == column {
    @supports (column-gap: $value) {
      column-gap: $value;
    }
    @supports not (column-gap: $value) {
      margin-right: calc( 0px - (#{$value} / 2));
      margin-left: calc( 0px - (#{$value} / 2));
      & > * {
        margin-right: calc(#{$value} / 2);
        margin-left: calc(#{$value} / 2);
      }
    }
  } @else if $property == row {
    @supports (row-gap: $value) {
      row-gap: $value;
    }
    @supports not (row-gap: $value) {
      & {
        margin-bottom: -$value;
      }
      & > * {
        margin-bottom: $value;
      }
    }
  } @else if $property == gap {
    @supports (gap: $value) {
      gap: $value;
    }
    @supports not (gap: $value) {
      margin-right: calc(0px - (#{$value} / 2));
      margin-left: calc(0px - (#{$value} / 2));
      margin-bottom: -$value;
      & > * {
        margin-right: calc(#{$value} / 2);
        margin-left: calc(#{$value} / 2);
        margin-bottom: $value;
      }
    }
  }
}